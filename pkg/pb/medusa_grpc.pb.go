// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MedusaClient is the client API for Medusa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedusaClient interface {
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error)
	BackupStatus(ctx context.Context, in *BackupStatusRequest, opts ...grpc.CallOption) (*BackupStatusResponse, error)
	DeleteBackup(ctx context.Context, in *DeleteBackupRequest, opts ...grpc.CallOption) (*DeleteBackupResponse, error)
	GetBackups(ctx context.Context, in *GetBackupsRequest, opts ...grpc.CallOption) (*GetBackupsResponse, error)
}

type medusaClient struct {
	cc grpc.ClientConnInterface
}

func NewMedusaClient(cc grpc.ClientConnInterface) MedusaClient {
	return &medusaClient{cc}
}

func (c *medusaClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error) {
	out := new(BackupResponse)
	err := c.cc.Invoke(ctx, "/Medusa/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medusaClient) BackupStatus(ctx context.Context, in *BackupStatusRequest, opts ...grpc.CallOption) (*BackupStatusResponse, error) {
	out := new(BackupStatusResponse)
	err := c.cc.Invoke(ctx, "/Medusa/BackupStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medusaClient) DeleteBackup(ctx context.Context, in *DeleteBackupRequest, opts ...grpc.CallOption) (*DeleteBackupResponse, error) {
	out := new(DeleteBackupResponse)
	err := c.cc.Invoke(ctx, "/Medusa/DeleteBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medusaClient) GetBackups(ctx context.Context, in *GetBackupsRequest, opts ...grpc.CallOption) (*GetBackupsResponse, error) {
	out := new(GetBackupsResponse)
	err := c.cc.Invoke(ctx, "/Medusa/GetBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedusaServer is the server API for Medusa service.
// All implementations must embed UnimplementedMedusaServer
// for forward compatibility
type MedusaServer interface {
	Backup(context.Context, *BackupRequest) (*BackupResponse, error)
	BackupStatus(context.Context, *BackupStatusRequest) (*BackupStatusResponse, error)
	DeleteBackup(context.Context, *DeleteBackupRequest) (*DeleteBackupResponse, error)
	GetBackups(context.Context, *GetBackupsRequest) (*GetBackupsResponse, error)
	mustEmbedUnimplementedMedusaServer()
}

// UnimplementedMedusaServer must be embedded to have forward compatible implementations.
type UnimplementedMedusaServer struct {
}

func (UnimplementedMedusaServer) Backup(context.Context, *BackupRequest) (*BackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedMedusaServer) BackupStatus(context.Context, *BackupStatusRequest) (*BackupStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupStatus not implemented")
}
func (UnimplementedMedusaServer) DeleteBackup(context.Context, *DeleteBackupRequest) (*DeleteBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackup not implemented")
}
func (UnimplementedMedusaServer) GetBackups(context.Context, *GetBackupsRequest) (*GetBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackups not implemented")
}
func (UnimplementedMedusaServer) mustEmbedUnimplementedMedusaServer() {}

// UnsafeMedusaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedusaServer will
// result in compilation errors.
type UnsafeMedusaServer interface {
	mustEmbedUnimplementedMedusaServer()
}

func RegisterMedusaServer(s grpc.ServiceRegistrar, srv MedusaServer) {
	s.RegisterService(&Medusa_ServiceDesc, srv)
}

func _Medusa_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedusaServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Medusa/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedusaServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Medusa_BackupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedusaServer).BackupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Medusa/BackupStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedusaServer).BackupStatus(ctx, req.(*BackupStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Medusa_DeleteBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedusaServer).DeleteBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Medusa/DeleteBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedusaServer).DeleteBackup(ctx, req.(*DeleteBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Medusa_GetBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedusaServer).GetBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Medusa/GetBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedusaServer).GetBackups(ctx, req.(*GetBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Medusa_ServiceDesc is the grpc.ServiceDesc for Medusa service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Medusa_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Medusa",
	HandlerType: (*MedusaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Backup",
			Handler:    _Medusa_Backup_Handler,
		},
		{
			MethodName: "BackupStatus",
			Handler:    _Medusa_BackupStatus_Handler,
		},
		{
			MethodName: "DeleteBackup",
			Handler:    _Medusa_DeleteBackup_Handler,
		},
		{
			MethodName: "GetBackups",
			Handler:    _Medusa_GetBackups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/medusa.proto",
}
